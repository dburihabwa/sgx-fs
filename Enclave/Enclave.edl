enclave {

    from "Sealing/Sealing.edl" import *;

    trusted {
        /* define ECALLs here. */
        public int init_filesystem();
        public int destroy_filesystem();
        public int enclave_is_file([in, string] const char* filename);
        public int ramfs_get([in, string] const char* filename, long offset, size_t size, [out, size=size] char* data);
        public int ramfs_put([in, string] const char* filename, long offset, size_t size, [in, size=size] const char* data);
        public sgx_status_t ramfs_encrypt([in, string] const char* filename, [in, size=size] uint8_t* plaintext, size_t size, [out, size=sealed_size] sgx_sealed_data_t* encrypted, size_t sealed_size);
        public sgx_status_t ramfs_decrypt([in, string] const char* filename, [in, size=sealed_size] sgx_sealed_data_t* encrypted, size_t sealed_size, [out, size=size] uint8_t* plaintext, size_t size);
        public int ramfs_get_size([in, string] const char *pathname);
        public int ramfs_trunkate([in, string] const char* filename, size_t size);
        public int ramfs_get_number_of_entries(void);
        public int enclave_readdir([in, string] const char* path, [out, size=size] char* filenames, size_t size);
        public int ramfs_create_file([in, string] const char *pathname);
        public int ramfs_delete_file([in, string] const char *pathname);
        public int enclave_mkdir([in, string] const char* pathname);
        public int sgxfs_dump([in, string] const char *pathname, [out, size=sealed_size] sgx_sealed_data_t* sealed_data, size_t sealed_size);
        public int sgxfs_restore([in, string] const char *pathname, [in, size=sealed_size] const sgx_sealed_data_t* sealed_data, size_t sealed_size);
    };

    untrusted {
        /* define OCALLs here. */
        void ocall_print([in, string]const char* str);
    };
};
